document.addEventListener("DOMContentLoaded", async function () {
    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    function showMessage(title, message, type) {
        window.common.showModal(title, message, type);
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ç–æ—á–µ–∫ –ø—Ä–æ–¥–∞–∂ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö"
    async function loadStockPoints() {
        try {
            const kktList = await window.common.loadKktList();
            const pointSelect = document.getElementById("stockPointSelect");
            pointSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É</option>';
            kktList.forEach(point => {
                const option = document.createElement("option");
                option.value = point.pointName;
                option.textContent = point.pointName;
                pointSelect.appendChild(option);
            });
            console.log("–¢–æ—á–∫–∏ –ø—Ä–æ–¥–∞–∂ –¥–ª—è –æ—Å—Ç–∞—Ç–∫–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", kktList);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ—á–µ–∫ –ø—Ä–æ–¥–∞–∂ –¥–ª—è –æ—Å—Ç–∞—Ç–∫–æ–≤:", error);
            showMessage("–û—à–∏–±–∫–∞", `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ—á–µ–∫ –ø—Ä–æ–¥–∞–∂: ${error.response?.data?.error || error.message}`, "error");
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
    async function loadProducts() {
        try {
            const response = await window.common.axiosWithRetry(() => window.common.axiosInstance.get("http://localhost:5000/api/products"));
            return response.data.products || [];
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:", error);
            showMessage("–û—à–∏–±–∫–∞", `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: ${error.response?.data?.error || error.message}`, "error");
            return [];
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å –±—ç–∫–µ–Ω–¥–∞
    async function loadStocks() {
        try {
            const point = document.getElementById("stockPointSelect").value;
            const products = await loadProducts();
            const response = await window.common.axiosWithRetry(() => window.common.axiosInstance.get("http://localhost:5000/api/stocks"));
            const stocks = response.data.stocks || {};
            const tableBody = document.getElementById("stockData");
            tableBody.innerHTML = ""; // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º

            if (!point) {
                tableBody.innerHTML = "<tr><td colspan='3'>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É –ø—Ä–æ–¥–∞–∂</td></tr>";
                return;
            }

            if (products.length === 0) {
                tableBody.innerHTML = "<tr><td colspan='3'>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö</td></tr>";
                return;
            }

            const pointStocks = stocks[point] || {};

            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ —Å–ø–∏—Å–∫–∞
            products.forEach(product => {
                const quantity = pointStocks[product.name] || 0;
                const row = document.createElement("tr");
                row.innerHTML = `
                    <td class="border p-2">${product.name}</td>
                    <td class="border p-2">${quantity}</td>
                    <td class="border p-2">
                        <button class="edit-stock-btn bg-blue-500 text-white px-2 py-1 rounded" data-point="${point}" data-product="${product.name}" data-quantity="${quantity}">–ò–∑–º–µ–Ω–∏—Ç—å</button>
                    </td>
                `;
                tableBody.appendChild(row);
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ò–∑–º–µ–Ω–∏—Ç—å"
            document.querySelectorAll(".edit-stock-btn").forEach(button => {
                button.addEventListener("click", () => {
                    const point = button.getAttribute("data-point");
                    const product = button.getAttribute("data-product");
                    const quantity = parseInt(button.getAttribute("data-quantity"));
                    openEditStockModal(point, product, quantity);
                });
            });
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Å—Ç–∞—Ç–∫–æ–≤:", error);
            showMessage("–û—à–∏–±–∫–∞", `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤: ${error.response?.data?.error || error.message}`, "error");
        }
    }

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤
    function openEditStockModal(point, product, currentQuantity) {
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        const existingModal = document.querySelector('.modal');
        if (existingModal) {
            existingModal.remove();
        }

        const modal = document.createElement('div');
        modal.className = 'modal fixed inset-0 flex items-center justify-center z-50';
        modal.innerHTML = `
            <div class="fixed inset-0 bg-black opacity-50"></div>
            <div class="relative bg-white rounded-lg shadow-lg p-6 max-w-sm w-full">
                <div class="flex items-center mb-4">
                    <span class="text-2xl mr-2">üì¶</span>
                    <h2 class="text-xl font-semibold bg-blue-500 text-white px-4 py-2 rounded">–ò–∑–º–µ–Ω–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏</h2>
                </div>
                <div class="mb-4">
                    <p class="mb-2"><strong>–¢–æ—á–∫–∞:</strong> ${point}</p>
                    <p class="mb-2"><strong>–¢–æ–≤–∞—Ä:</strong> ${product}</p>
                    <label for="newQuantity" class="block mb-1">–ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:</label>
                    <input type="number" id="newQuantity" class="border p-2 rounded w-full" value="${currentQuantity}" min="0">
                </div>
                <div class="flex justify-end space-x-2">
                    <button id="saveStock" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                    <button class="close-modal bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600">–ó–∞–∫—Ä—ã—Ç—å</button>
                </div>
            </div>
        `;

        document.body.appendChild(modal);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const closeModal = () => modal.remove();
        modal.querySelector('.close-modal').addEventListener('click', closeModal);
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                closeModal();
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        document.getElementById("saveStock").addEventListener("click", async () => {
            const newQuantity = parseInt(document.getElementById("newQuantity").value);
            if (isNaN(newQuantity) || newQuantity < 0) {
                showMessage("–û—à–∏–±–∫–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0", "error");
                return;
            }
            await updateStock(point, product, newQuantity, "set");
            closeModal();
        });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤
    async function updateStock(point, product, quantity, operation) {
        try {
            const response = await window.common.axiosWithRetry(() => window.common.axiosInstance.post("http://localhost:5000/api/stocks", {
                point,
                product,
                quantity,
                operation
            }));
            await loadStocks();
            showMessage("–£—Å–ø–µ—Ö", response.data.message, "success");
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤:", error);
            showMessage("–û—à–∏–±–∫–∞", `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤: ${error.response?.data?.error || error.message}`, "error");
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    try {
        await window.common.getSid();
        if (window.common.getSidValue()) {
            await loadStockPoints();
            await loadStocks();
        } else {
            showMessage("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å SID", "error");
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:", error);
        showMessage("–û—à–∏–±–∫–∞", "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: " + error.message, "error");
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ—á–∫–∏
    const pointSelect = document.getElementById("stockPointSelect");
    if (pointSelect) {
        pointSelect.addEventListener("change", async () => {
            await loadStocks();
        });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–±–Ω–æ–≤–∏—Ç—å"
    const refreshButton = document.querySelector(".refresh-btn[data-tab='stock']");
    if (refreshButton) {
        refreshButton.addEventListener("click", async () => {
            await loadStocks();
        });
    }
});